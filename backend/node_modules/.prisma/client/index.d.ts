
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Denuncia
 * 
 */
export type Denuncia = $Result.DefaultSelection<Prisma.$DenunciaPayload>
/**
 * Model Ocorrencia
 * 
 */
export type Ocorrencia = $Result.DefaultSelection<Prisma.$OcorrenciaPayload>
/**
 * Model Notificacao
 * 
 */
export type Notificacao = $Result.DefaultSelection<Prisma.$NotificacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.denuncia`: Exposes CRUD operations for the **Denuncia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Denuncias
    * const denuncias = await prisma.denuncia.findMany()
    * ```
    */
  get denuncia(): Prisma.DenunciaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ocorrencia`: Exposes CRUD operations for the **Ocorrencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ocorrencias
    * const ocorrencias = await prisma.ocorrencia.findMany()
    * ```
    */
  get ocorrencia(): Prisma.OcorrenciaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificacao`: Exposes CRUD operations for the **Notificacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notificacaos
    * const notificacaos = await prisma.notificacao.findMany()
    * ```
    */
  get notificacao(): Prisma.NotificacaoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Denuncia: 'Denuncia',
    Ocorrencia: 'Ocorrencia',
    Notificacao: 'Notificacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "denuncia" | "ocorrencia" | "notificacao"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Denuncia: {
        payload: Prisma.$DenunciaPayload<ExtArgs>
        fields: Prisma.DenunciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DenunciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DenunciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findFirst: {
            args: Prisma.DenunciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DenunciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findMany: {
            args: Prisma.DenunciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>[]
          }
          create: {
            args: Prisma.DenunciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          createMany: {
            args: Prisma.DenunciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DenunciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>[]
          }
          delete: {
            args: Prisma.DenunciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          update: {
            args: Prisma.DenunciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          deleteMany: {
            args: Prisma.DenunciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DenunciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DenunciaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>[]
          }
          upsert: {
            args: Prisma.DenunciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          aggregate: {
            args: Prisma.DenunciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDenuncia>
          }
          groupBy: {
            args: Prisma.DenunciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DenunciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DenunciaCountArgs<ExtArgs>
            result: $Utils.Optional<DenunciaCountAggregateOutputType> | number
          }
        }
      }
      Ocorrencia: {
        payload: Prisma.$OcorrenciaPayload<ExtArgs>
        fields: Prisma.OcorrenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OcorrenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OcorrenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findFirst: {
            args: Prisma.OcorrenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OcorrenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findMany: {
            args: Prisma.OcorrenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          create: {
            args: Prisma.OcorrenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          createMany: {
            args: Prisma.OcorrenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OcorrenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          delete: {
            args: Prisma.OcorrenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          update: {
            args: Prisma.OcorrenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          deleteMany: {
            args: Prisma.OcorrenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OcorrenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OcorrenciaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          upsert: {
            args: Prisma.OcorrenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          aggregate: {
            args: Prisma.OcorrenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOcorrencia>
          }
          groupBy: {
            args: Prisma.OcorrenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OcorrenciaCountArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaCountAggregateOutputType> | number
          }
        }
      }
      Notificacao: {
        payload: Prisma.$NotificacaoPayload<ExtArgs>
        fields: Prisma.NotificacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findFirst: {
            args: Prisma.NotificacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findMany: {
            args: Prisma.NotificacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          create: {
            args: Prisma.NotificacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          createMany: {
            args: Prisma.NotificacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          delete: {
            args: Prisma.NotificacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          update: {
            args: Prisma.NotificacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          deleteMany: {
            args: Prisma.NotificacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificacaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          upsert: {
            args: Prisma.NotificacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          aggregate: {
            args: Prisma.NotificacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificacao>
          }
          groupBy: {
            args: Prisma.NotificacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacaoCountArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    denuncia?: DenunciaOmit
    ocorrencia?: OcorrenciaOmit
    notificacao?: NotificacaoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    denuncias: number
    ocorrencias: number
    notificacoes: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    denuncias?: boolean | UsuarioCountOutputTypeCountDenunciasArgs
    ocorrencias?: boolean | UsuarioCountOutputTypeCountOcorrenciasArgs
    notificacoes?: boolean | UsuarioCountOutputTypeCountNotificacoesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDenunciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DenunciaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountOcorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountNotificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
  }


  /**
   * Count Type DenunciaCountOutputType
   */

  export type DenunciaCountOutputType = {
    ocorrencias: number
  }

  export type DenunciaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ocorrencias?: boolean | DenunciaCountOutputTypeCountOcorrenciasArgs
  }

  // Custom InputTypes
  /**
   * DenunciaCountOutputType without action
   */
  export type DenunciaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DenunciaCountOutputType
     */
    select?: DenunciaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DenunciaCountOutputType without action
   */
  export type DenunciaCountOutputTypeCountOcorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    nivel: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    nivel: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    nivel: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nivel?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nivel?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    nivel?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    nome: string
    email: string
    senha: string
    nivel: string
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nivel?: boolean
    denuncias?: boolean | Usuario$denunciasArgs<ExtArgs>
    ocorrencias?: boolean | Usuario$ocorrenciasArgs<ExtArgs>
    notificacoes?: boolean | Usuario$notificacoesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nivel?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nivel?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    nivel?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "nivel", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    denuncias?: boolean | Usuario$denunciasArgs<ExtArgs>
    ocorrencias?: boolean | Usuario$ocorrenciasArgs<ExtArgs>
    notificacoes?: boolean | Usuario$notificacoesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      denuncias: Prisma.$DenunciaPayload<ExtArgs>[]
      ocorrencias: Prisma.$OcorrenciaPayload<ExtArgs>[]
      notificacoes: Prisma.$NotificacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      senha: string
      nivel: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    denuncias<T extends Usuario$denunciasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$denunciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ocorrencias<T extends Usuario$ocorrenciasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ocorrenciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificacoes<T extends Usuario$notificacoesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$notificacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly nivel: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.denuncias
   */
  export type Usuario$denunciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    where?: DenunciaWhereInput
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    cursor?: DenunciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Usuario.ocorrencias
   */
  export type Usuario$ocorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    cursor?: OcorrenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Usuario.notificacoes
   */
  export type Usuario$notificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    cursor?: NotificacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Denuncia
   */

  export type AggregateDenuncia = {
    _count: DenunciaCountAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  export type DenunciaMinAggregateOutputType = {
    id: string | null
    descricao: string | null
    localizacao: string | null
    status: string | null
    usuarioId: string | null
  }

  export type DenunciaMaxAggregateOutputType = {
    id: string | null
    descricao: string | null
    localizacao: string | null
    status: string | null
    usuarioId: string | null
  }

  export type DenunciaCountAggregateOutputType = {
    id: number
    descricao: number
    localizacao: number
    status: number
    usuarioId: number
    _all: number
  }


  export type DenunciaMinAggregateInputType = {
    id?: true
    descricao?: true
    localizacao?: true
    status?: true
    usuarioId?: true
  }

  export type DenunciaMaxAggregateInputType = {
    id?: true
    descricao?: true
    localizacao?: true
    status?: true
    usuarioId?: true
  }

  export type DenunciaCountAggregateInputType = {
    id?: true
    descricao?: true
    localizacao?: true
    status?: true
    usuarioId?: true
    _all?: true
  }

  export type DenunciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncia to aggregate.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Denuncias
    **/
    _count?: true | DenunciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DenunciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DenunciaMaxAggregateInputType
  }

  export type GetDenunciaAggregateType<T extends DenunciaAggregateArgs> = {
        [P in keyof T & keyof AggregateDenuncia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDenuncia[P]>
      : GetScalarType<T[P], AggregateDenuncia[P]>
  }




  export type DenunciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DenunciaWhereInput
    orderBy?: DenunciaOrderByWithAggregationInput | DenunciaOrderByWithAggregationInput[]
    by: DenunciaScalarFieldEnum[] | DenunciaScalarFieldEnum
    having?: DenunciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DenunciaCountAggregateInputType | true
    _min?: DenunciaMinAggregateInputType
    _max?: DenunciaMaxAggregateInputType
  }

  export type DenunciaGroupByOutputType = {
    id: string
    descricao: string
    localizacao: string
    status: string
    usuarioId: string | null
    _count: DenunciaCountAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  type GetDenunciaGroupByPayload<T extends DenunciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DenunciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DenunciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
            : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
        }
      >
    >


  export type DenunciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    localizacao?: boolean
    status?: boolean
    usuarioId?: boolean
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
    ocorrencias?: boolean | Denuncia$ocorrenciasArgs<ExtArgs>
    _count?: boolean | DenunciaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["denuncia"]>

  export type DenunciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    localizacao?: boolean
    status?: boolean
    usuarioId?: boolean
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["denuncia"]>

  export type DenunciaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    localizacao?: boolean
    status?: boolean
    usuarioId?: boolean
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["denuncia"]>

  export type DenunciaSelectScalar = {
    id?: boolean
    descricao?: boolean
    localizacao?: boolean
    status?: boolean
    usuarioId?: boolean
  }

  export type DenunciaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao" | "localizacao" | "status" | "usuarioId", ExtArgs["result"]["denuncia"]>
  export type DenunciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
    ocorrencias?: boolean | Denuncia$ocorrenciasArgs<ExtArgs>
    _count?: boolean | DenunciaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DenunciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
  }
  export type DenunciaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Denuncia$usuarioArgs<ExtArgs>
  }

  export type $DenunciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Denuncia"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
      ocorrencias: Prisma.$OcorrenciaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descricao: string
      localizacao: string
      status: string
      usuarioId: string | null
    }, ExtArgs["result"]["denuncia"]>
    composites: {}
  }

  type DenunciaGetPayload<S extends boolean | null | undefined | DenunciaDefaultArgs> = $Result.GetResult<Prisma.$DenunciaPayload, S>

  type DenunciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DenunciaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DenunciaCountAggregateInputType | true
    }

  export interface DenunciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Denuncia'], meta: { name: 'Denuncia' } }
    /**
     * Find zero or one Denuncia that matches the filter.
     * @param {DenunciaFindUniqueArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DenunciaFindUniqueArgs>(args: SelectSubset<T, DenunciaFindUniqueArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Denuncia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DenunciaFindUniqueOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DenunciaFindUniqueOrThrowArgs>(args: SelectSubset<T, DenunciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Denuncia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DenunciaFindFirstArgs>(args?: SelectSubset<T, DenunciaFindFirstArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Denuncia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DenunciaFindFirstOrThrowArgs>(args?: SelectSubset<T, DenunciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Denuncias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Denuncias
     * const denuncias = await prisma.denuncia.findMany()
     * 
     * // Get first 10 Denuncias
     * const denuncias = await prisma.denuncia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const denunciaWithIdOnly = await prisma.denuncia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DenunciaFindManyArgs>(args?: SelectSubset<T, DenunciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Denuncia.
     * @param {DenunciaCreateArgs} args - Arguments to create a Denuncia.
     * @example
     * // Create one Denuncia
     * const Denuncia = await prisma.denuncia.create({
     *   data: {
     *     // ... data to create a Denuncia
     *   }
     * })
     * 
     */
    create<T extends DenunciaCreateArgs>(args: SelectSubset<T, DenunciaCreateArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Denuncias.
     * @param {DenunciaCreateManyArgs} args - Arguments to create many Denuncias.
     * @example
     * // Create many Denuncias
     * const denuncia = await prisma.denuncia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DenunciaCreateManyArgs>(args?: SelectSubset<T, DenunciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Denuncias and returns the data saved in the database.
     * @param {DenunciaCreateManyAndReturnArgs} args - Arguments to create many Denuncias.
     * @example
     * // Create many Denuncias
     * const denuncia = await prisma.denuncia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Denuncias and only return the `id`
     * const denunciaWithIdOnly = await prisma.denuncia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DenunciaCreateManyAndReturnArgs>(args?: SelectSubset<T, DenunciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Denuncia.
     * @param {DenunciaDeleteArgs} args - Arguments to delete one Denuncia.
     * @example
     * // Delete one Denuncia
     * const Denuncia = await prisma.denuncia.delete({
     *   where: {
     *     // ... filter to delete one Denuncia
     *   }
     * })
     * 
     */
    delete<T extends DenunciaDeleteArgs>(args: SelectSubset<T, DenunciaDeleteArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Denuncia.
     * @param {DenunciaUpdateArgs} args - Arguments to update one Denuncia.
     * @example
     * // Update one Denuncia
     * const denuncia = await prisma.denuncia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DenunciaUpdateArgs>(args: SelectSubset<T, DenunciaUpdateArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Denuncias.
     * @param {DenunciaDeleteManyArgs} args - Arguments to filter Denuncias to delete.
     * @example
     * // Delete a few Denuncias
     * const { count } = await prisma.denuncia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DenunciaDeleteManyArgs>(args?: SelectSubset<T, DenunciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Denuncias
     * const denuncia = await prisma.denuncia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DenunciaUpdateManyArgs>(args: SelectSubset<T, DenunciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Denuncias and returns the data updated in the database.
     * @param {DenunciaUpdateManyAndReturnArgs} args - Arguments to update many Denuncias.
     * @example
     * // Update many Denuncias
     * const denuncia = await prisma.denuncia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Denuncias and only return the `id`
     * const denunciaWithIdOnly = await prisma.denuncia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DenunciaUpdateManyAndReturnArgs>(args: SelectSubset<T, DenunciaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Denuncia.
     * @param {DenunciaUpsertArgs} args - Arguments to update or create a Denuncia.
     * @example
     * // Update or create a Denuncia
     * const denuncia = await prisma.denuncia.upsert({
     *   create: {
     *     // ... data to create a Denuncia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Denuncia we want to update
     *   }
     * })
     */
    upsert<T extends DenunciaUpsertArgs>(args: SelectSubset<T, DenunciaUpsertArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaCountArgs} args - Arguments to filter Denuncias to count.
     * @example
     * // Count the number of Denuncias
     * const count = await prisma.denuncia.count({
     *   where: {
     *     // ... the filter for the Denuncias we want to count
     *   }
     * })
    **/
    count<T extends DenunciaCountArgs>(
      args?: Subset<T, DenunciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DenunciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DenunciaAggregateArgs>(args: Subset<T, DenunciaAggregateArgs>): Prisma.PrismaPromise<GetDenunciaAggregateType<T>>

    /**
     * Group by Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DenunciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DenunciaGroupByArgs['orderBy'] }
        : { orderBy?: DenunciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DenunciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDenunciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Denuncia model
   */
  readonly fields: DenunciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Denuncia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DenunciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Denuncia$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Denuncia$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ocorrencias<T extends Denuncia$ocorrenciasArgs<ExtArgs> = {}>(args?: Subset<T, Denuncia$ocorrenciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Denuncia model
   */ 
  interface DenunciaFieldRefs {
    readonly id: FieldRef<"Denuncia", 'String'>
    readonly descricao: FieldRef<"Denuncia", 'String'>
    readonly localizacao: FieldRef<"Denuncia", 'String'>
    readonly status: FieldRef<"Denuncia", 'String'>
    readonly usuarioId: FieldRef<"Denuncia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Denuncia findUnique
   */
  export type DenunciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia findUniqueOrThrow
   */
  export type DenunciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia findFirst
   */
  export type DenunciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia findFirstOrThrow
   */
  export type DenunciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia findMany
   */
  export type DenunciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncias to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia create
   */
  export type DenunciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Denuncia.
     */
    data: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
  }

  /**
   * Denuncia createMany
   */
  export type DenunciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Denuncias.
     */
    data: DenunciaCreateManyInput | DenunciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Denuncia createManyAndReturn
   */
  export type DenunciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * The data used to create many Denuncias.
     */
    data: DenunciaCreateManyInput | DenunciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Denuncia update
   */
  export type DenunciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Denuncia.
     */
    data: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
    /**
     * Choose, which Denuncia to update.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia updateMany
   */
  export type DenunciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Denuncias.
     */
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyInput>
    /**
     * Filter which Denuncias to update
     */
    where?: DenunciaWhereInput
    /**
     * Limit how many Denuncias to update.
     */
    limit?: number
  }

  /**
   * Denuncia updateManyAndReturn
   */
  export type DenunciaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * The data used to update Denuncias.
     */
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyInput>
    /**
     * Filter which Denuncias to update
     */
    where?: DenunciaWhereInput
    /**
     * Limit how many Denuncias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Denuncia upsert
   */
  export type DenunciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Denuncia to update in case it exists.
     */
    where: DenunciaWhereUniqueInput
    /**
     * In case the Denuncia found by the `where` argument doesn't exist, create a new Denuncia with this data.
     */
    create: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
    /**
     * In case the Denuncia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
  }

  /**
   * Denuncia delete
   */
  export type DenunciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter which Denuncia to delete.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia deleteMany
   */
  export type DenunciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncias to delete
     */
    where?: DenunciaWhereInput
    /**
     * Limit how many Denuncias to delete.
     */
    limit?: number
  }

  /**
   * Denuncia.usuario
   */
  export type Denuncia$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Denuncia.ocorrencias
   */
  export type Denuncia$ocorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    cursor?: OcorrenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Denuncia without action
   */
  export type DenunciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Denuncia
     */
    omit?: DenunciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
  }


  /**
   * Model Ocorrencia
   */

  export type AggregateOcorrencia = {
    _count: OcorrenciaCountAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  export type OcorrenciaMinAggregateOutputType = {
    id: string | null
    denunciaId: string | null
    servidorId: string | null
    status: string | null
    data_registro: Date | null
  }

  export type OcorrenciaMaxAggregateOutputType = {
    id: string | null
    denunciaId: string | null
    servidorId: string | null
    status: string | null
    data_registro: Date | null
  }

  export type OcorrenciaCountAggregateOutputType = {
    id: number
    denunciaId: number
    servidorId: number
    status: number
    data_registro: number
    _all: number
  }


  export type OcorrenciaMinAggregateInputType = {
    id?: true
    denunciaId?: true
    servidorId?: true
    status?: true
    data_registro?: true
  }

  export type OcorrenciaMaxAggregateInputType = {
    id?: true
    denunciaId?: true
    servidorId?: true
    status?: true
    data_registro?: true
  }

  export type OcorrenciaCountAggregateInputType = {
    id?: true
    denunciaId?: true
    servidorId?: true
    status?: true
    data_registro?: true
    _all?: true
  }

  export type OcorrenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencia to aggregate.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ocorrencias
    **/
    _count?: true | OcorrenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OcorrenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type GetOcorrenciaAggregateType<T extends OcorrenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateOcorrencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOcorrencia[P]>
      : GetScalarType<T[P], AggregateOcorrencia[P]>
  }




  export type OcorrenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithAggregationInput | OcorrenciaOrderByWithAggregationInput[]
    by: OcorrenciaScalarFieldEnum[] | OcorrenciaScalarFieldEnum
    having?: OcorrenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OcorrenciaCountAggregateInputType | true
    _min?: OcorrenciaMinAggregateInputType
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type OcorrenciaGroupByOutputType = {
    id: string
    denunciaId: string
    servidorId: string
    status: string
    data_registro: Date
    _count: OcorrenciaCountAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  type GetOcorrenciaGroupByPayload<T extends OcorrenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OcorrenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OcorrenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
            : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
        }
      >
    >


  export type OcorrenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    denunciaId?: boolean
    servidorId?: boolean
    status?: boolean
    data_registro?: boolean
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    denunciaId?: boolean
    servidorId?: boolean
    status?: boolean
    data_registro?: boolean
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    denunciaId?: boolean
    servidorId?: boolean
    status?: boolean
    data_registro?: boolean
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectScalar = {
    id?: boolean
    denunciaId?: boolean
    servidorId?: boolean
    status?: boolean
    data_registro?: boolean
  }

  export type OcorrenciaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "denunciaId" | "servidorId" | "status" | "data_registro", ExtArgs["result"]["ocorrencia"]>
  export type OcorrenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type OcorrenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type OcorrenciaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $OcorrenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ocorrencia"
    objects: {
      denuncia: Prisma.$DenunciaPayload<ExtArgs>
      servidor: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      denunciaId: string
      servidorId: string
      status: string
      data_registro: Date
    }, ExtArgs["result"]["ocorrencia"]>
    composites: {}
  }

  type OcorrenciaGetPayload<S extends boolean | null | undefined | OcorrenciaDefaultArgs> = $Result.GetResult<Prisma.$OcorrenciaPayload, S>

  type OcorrenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OcorrenciaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OcorrenciaCountAggregateInputType | true
    }

  export interface OcorrenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ocorrencia'], meta: { name: 'Ocorrencia' } }
    /**
     * Find zero or one Ocorrencia that matches the filter.
     * @param {OcorrenciaFindUniqueArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OcorrenciaFindUniqueArgs>(args: SelectSubset<T, OcorrenciaFindUniqueArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ocorrencia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OcorrenciaFindUniqueOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OcorrenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, OcorrenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ocorrencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OcorrenciaFindFirstArgs>(args?: SelectSubset<T, OcorrenciaFindFirstArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ocorrencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OcorrenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, OcorrenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ocorrencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany()
     * 
     * // Get first 10 Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OcorrenciaFindManyArgs>(args?: SelectSubset<T, OcorrenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ocorrencia.
     * @param {OcorrenciaCreateArgs} args - Arguments to create a Ocorrencia.
     * @example
     * // Create one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.create({
     *   data: {
     *     // ... data to create a Ocorrencia
     *   }
     * })
     * 
     */
    create<T extends OcorrenciaCreateArgs>(args: SelectSubset<T, OcorrenciaCreateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ocorrencias.
     * @param {OcorrenciaCreateManyArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OcorrenciaCreateManyArgs>(args?: SelectSubset<T, OcorrenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ocorrencias and returns the data saved in the database.
     * @param {OcorrenciaCreateManyAndReturnArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ocorrencias and only return the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OcorrenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, OcorrenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ocorrencia.
     * @param {OcorrenciaDeleteArgs} args - Arguments to delete one Ocorrencia.
     * @example
     * // Delete one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.delete({
     *   where: {
     *     // ... filter to delete one Ocorrencia
     *   }
     * })
     * 
     */
    delete<T extends OcorrenciaDeleteArgs>(args: SelectSubset<T, OcorrenciaDeleteArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ocorrencia.
     * @param {OcorrenciaUpdateArgs} args - Arguments to update one Ocorrencia.
     * @example
     * // Update one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OcorrenciaUpdateArgs>(args: SelectSubset<T, OcorrenciaUpdateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ocorrencias.
     * @param {OcorrenciaDeleteManyArgs} args - Arguments to filter Ocorrencias to delete.
     * @example
     * // Delete a few Ocorrencias
     * const { count } = await prisma.ocorrencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OcorrenciaDeleteManyArgs>(args?: SelectSubset<T, OcorrenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OcorrenciaUpdateManyArgs>(args: SelectSubset<T, OcorrenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ocorrencias and returns the data updated in the database.
     * @param {OcorrenciaUpdateManyAndReturnArgs} args - Arguments to update many Ocorrencias.
     * @example
     * // Update many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ocorrencias and only return the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OcorrenciaUpdateManyAndReturnArgs>(args: SelectSubset<T, OcorrenciaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ocorrencia.
     * @param {OcorrenciaUpsertArgs} args - Arguments to update or create a Ocorrencia.
     * @example
     * // Update or create a Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.upsert({
     *   create: {
     *     // ... data to create a Ocorrencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ocorrencia we want to update
     *   }
     * })
     */
    upsert<T extends OcorrenciaUpsertArgs>(args: SelectSubset<T, OcorrenciaUpsertArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaCountArgs} args - Arguments to filter Ocorrencias to count.
     * @example
     * // Count the number of Ocorrencias
     * const count = await prisma.ocorrencia.count({
     *   where: {
     *     // ... the filter for the Ocorrencias we want to count
     *   }
     * })
    **/
    count<T extends OcorrenciaCountArgs>(
      args?: Subset<T, OcorrenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OcorrenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OcorrenciaAggregateArgs>(args: Subset<T, OcorrenciaAggregateArgs>): Prisma.PrismaPromise<GetOcorrenciaAggregateType<T>>

    /**
     * Group by Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OcorrenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OcorrenciaGroupByArgs['orderBy'] }
        : { orderBy?: OcorrenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OcorrenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOcorrenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ocorrencia model
   */
  readonly fields: OcorrenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ocorrencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OcorrenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    denuncia<T extends DenunciaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DenunciaDefaultArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    servidor<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ocorrencia model
   */ 
  interface OcorrenciaFieldRefs {
    readonly id: FieldRef<"Ocorrencia", 'String'>
    readonly denunciaId: FieldRef<"Ocorrencia", 'String'>
    readonly servidorId: FieldRef<"Ocorrencia", 'String'>
    readonly status: FieldRef<"Ocorrencia", 'String'>
    readonly data_registro: FieldRef<"Ocorrencia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ocorrencia findUnique
   */
  export type OcorrenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findUniqueOrThrow
   */
  export type OcorrenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findFirst
   */
  export type OcorrenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findFirstOrThrow
   */
  export type OcorrenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findMany
   */
  export type OcorrenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencias to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia create
   */
  export type OcorrenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Ocorrencia.
     */
    data: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
  }

  /**
   * Ocorrencia createMany
   */
  export type OcorrenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ocorrencia createManyAndReturn
   */
  export type OcorrenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ocorrencia update
   */
  export type OcorrenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Ocorrencia.
     */
    data: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
    /**
     * Choose, which Ocorrencia to update.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia updateMany
   */
  export type OcorrenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ocorrencias.
     */
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyInput>
    /**
     * Filter which Ocorrencias to update
     */
    where?: OcorrenciaWhereInput
    /**
     * Limit how many Ocorrencias to update.
     */
    limit?: number
  }

  /**
   * Ocorrencia updateManyAndReturn
   */
  export type OcorrenciaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * The data used to update Ocorrencias.
     */
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyInput>
    /**
     * Filter which Ocorrencias to update
     */
    where?: OcorrenciaWhereInput
    /**
     * Limit how many Ocorrencias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ocorrencia upsert
   */
  export type OcorrenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Ocorrencia to update in case it exists.
     */
    where: OcorrenciaWhereUniqueInput
    /**
     * In case the Ocorrencia found by the `where` argument doesn't exist, create a new Ocorrencia with this data.
     */
    create: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
    /**
     * In case the Ocorrencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
  }

  /**
   * Ocorrencia delete
   */
  export type OcorrenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter which Ocorrencia to delete.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia deleteMany
   */
  export type OcorrenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencias to delete
     */
    where?: OcorrenciaWhereInput
    /**
     * Limit how many Ocorrencias to delete.
     */
    limit?: number
  }

  /**
   * Ocorrencia without action
   */
  export type OcorrenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ocorrencia
     */
    omit?: OcorrenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
  }


  /**
   * Model Notificacao
   */

  export type AggregateNotificacao = {
    _count: NotificacaoCountAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  export type NotificacaoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    mensagem: string | null
    data_envio: Date | null
  }

  export type NotificacaoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    mensagem: string | null
    data_envio: Date | null
  }

  export type NotificacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    mensagem: number
    data_envio: number
    _all: number
  }


  export type NotificacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    mensagem?: true
    data_envio?: true
  }

  export type NotificacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    mensagem?: true
    data_envio?: true
  }

  export type NotificacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    mensagem?: true
    data_envio?: true
    _all?: true
  }

  export type NotificacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacao to aggregate.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notificacaos
    **/
    _count?: true | NotificacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacaoMaxAggregateInputType
  }

  export type GetNotificacaoAggregateType<T extends NotificacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacao[P]>
      : GetScalarType<T[P], AggregateNotificacao[P]>
  }




  export type NotificacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithAggregationInput | NotificacaoOrderByWithAggregationInput[]
    by: NotificacaoScalarFieldEnum[] | NotificacaoScalarFieldEnum
    having?: NotificacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacaoCountAggregateInputType | true
    _min?: NotificacaoMinAggregateInputType
    _max?: NotificacaoMaxAggregateInputType
  }

  export type NotificacaoGroupByOutputType = {
    id: string
    usuarioId: string
    mensagem: string
    data_envio: Date
    _count: NotificacaoCountAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  type GetNotificacaoGroupByPayload<T extends NotificacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
        }
      >
    >


  export type NotificacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    mensagem?: boolean
    data_envio?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    mensagem?: boolean
    data_envio?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    mensagem?: boolean
    data_envio?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    mensagem?: boolean
    data_envio?: boolean
  }

  export type NotificacaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "mensagem" | "data_envio", ExtArgs["result"]["notificacao"]>
  export type NotificacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type NotificacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type NotificacaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $NotificacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notificacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      mensagem: string
      data_envio: Date
    }, ExtArgs["result"]["notificacao"]>
    composites: {}
  }

  type NotificacaoGetPayload<S extends boolean | null | undefined | NotificacaoDefaultArgs> = $Result.GetResult<Prisma.$NotificacaoPayload, S>

  type NotificacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificacaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificacaoCountAggregateInputType | true
    }

  export interface NotificacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notificacao'], meta: { name: 'Notificacao' } }
    /**
     * Find zero or one Notificacao that matches the filter.
     * @param {NotificacaoFindUniqueArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificacaoFindUniqueArgs>(args: SelectSubset<T, NotificacaoFindUniqueArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notificacao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificacaoFindUniqueOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notificacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificacaoFindFirstArgs>(args?: SelectSubset<T, NotificacaoFindFirstArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notificacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notificacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notificacaos
     * const notificacaos = await prisma.notificacao.findMany()
     * 
     * // Get first 10 Notificacaos
     * const notificacaos = await prisma.notificacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificacaoFindManyArgs>(args?: SelectSubset<T, NotificacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notificacao.
     * @param {NotificacaoCreateArgs} args - Arguments to create a Notificacao.
     * @example
     * // Create one Notificacao
     * const Notificacao = await prisma.notificacao.create({
     *   data: {
     *     // ... data to create a Notificacao
     *   }
     * })
     * 
     */
    create<T extends NotificacaoCreateArgs>(args: SelectSubset<T, NotificacaoCreateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notificacaos.
     * @param {NotificacaoCreateManyArgs} args - Arguments to create many Notificacaos.
     * @example
     * // Create many Notificacaos
     * const notificacao = await prisma.notificacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificacaoCreateManyArgs>(args?: SelectSubset<T, NotificacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notificacaos and returns the data saved in the database.
     * @param {NotificacaoCreateManyAndReturnArgs} args - Arguments to create many Notificacaos.
     * @example
     * // Create many Notificacaos
     * const notificacao = await prisma.notificacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notificacaos and only return the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notificacao.
     * @param {NotificacaoDeleteArgs} args - Arguments to delete one Notificacao.
     * @example
     * // Delete one Notificacao
     * const Notificacao = await prisma.notificacao.delete({
     *   where: {
     *     // ... filter to delete one Notificacao
     *   }
     * })
     * 
     */
    delete<T extends NotificacaoDeleteArgs>(args: SelectSubset<T, NotificacaoDeleteArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notificacao.
     * @param {NotificacaoUpdateArgs} args - Arguments to update one Notificacao.
     * @example
     * // Update one Notificacao
     * const notificacao = await prisma.notificacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificacaoUpdateArgs>(args: SelectSubset<T, NotificacaoUpdateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notificacaos.
     * @param {NotificacaoDeleteManyArgs} args - Arguments to filter Notificacaos to delete.
     * @example
     * // Delete a few Notificacaos
     * const { count } = await prisma.notificacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificacaoDeleteManyArgs>(args?: SelectSubset<T, NotificacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notificacaos
     * const notificacao = await prisma.notificacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificacaoUpdateManyArgs>(args: SelectSubset<T, NotificacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacaos and returns the data updated in the database.
     * @param {NotificacaoUpdateManyAndReturnArgs} args - Arguments to update many Notificacaos.
     * @example
     * // Update many Notificacaos
     * const notificacao = await prisma.notificacao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notificacaos and only return the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificacaoUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificacaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notificacao.
     * @param {NotificacaoUpsertArgs} args - Arguments to update or create a Notificacao.
     * @example
     * // Update or create a Notificacao
     * const notificacao = await prisma.notificacao.upsert({
     *   create: {
     *     // ... data to create a Notificacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notificacao we want to update
     *   }
     * })
     */
    upsert<T extends NotificacaoUpsertArgs>(args: SelectSubset<T, NotificacaoUpsertArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoCountArgs} args - Arguments to filter Notificacaos to count.
     * @example
     * // Count the number of Notificacaos
     * const count = await prisma.notificacao.count({
     *   where: {
     *     // ... the filter for the Notificacaos we want to count
     *   }
     * })
    **/
    count<T extends NotificacaoCountArgs>(
      args?: Subset<T, NotificacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacaoAggregateArgs>(args: Subset<T, NotificacaoAggregateArgs>): Prisma.PrismaPromise<GetNotificacaoAggregateType<T>>

    /**
     * Group by Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacaoGroupByArgs['orderBy'] }
        : { orderBy?: NotificacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notificacao model
   */
  readonly fields: NotificacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notificacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notificacao model
   */ 
  interface NotificacaoFieldRefs {
    readonly id: FieldRef<"Notificacao", 'String'>
    readonly usuarioId: FieldRef<"Notificacao", 'String'>
    readonly mensagem: FieldRef<"Notificacao", 'String'>
    readonly data_envio: FieldRef<"Notificacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notificacao findUnique
   */
  export type NotificacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findUniqueOrThrow
   */
  export type NotificacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findFirst
   */
  export type NotificacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findFirstOrThrow
   */
  export type NotificacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findMany
   */
  export type NotificacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacaos to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao create
   */
  export type NotificacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Notificacao.
     */
    data: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
  }

  /**
   * Notificacao createMany
   */
  export type NotificacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notificacaos.
     */
    data: NotificacaoCreateManyInput | NotificacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notificacao createManyAndReturn
   */
  export type NotificacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * The data used to create many Notificacaos.
     */
    data: NotificacaoCreateManyInput | NotificacaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notificacao update
   */
  export type NotificacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Notificacao.
     */
    data: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
    /**
     * Choose, which Notificacao to update.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao updateMany
   */
  export type NotificacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notificacaos.
     */
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyInput>
    /**
     * Filter which Notificacaos to update
     */
    where?: NotificacaoWhereInput
    /**
     * Limit how many Notificacaos to update.
     */
    limit?: number
  }

  /**
   * Notificacao updateManyAndReturn
   */
  export type NotificacaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * The data used to update Notificacaos.
     */
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyInput>
    /**
     * Filter which Notificacaos to update
     */
    where?: NotificacaoWhereInput
    /**
     * Limit how many Notificacaos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notificacao upsert
   */
  export type NotificacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Notificacao to update in case it exists.
     */
    where: NotificacaoWhereUniqueInput
    /**
     * In case the Notificacao found by the `where` argument doesn't exist, create a new Notificacao with this data.
     */
    create: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
    /**
     * In case the Notificacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
  }

  /**
   * Notificacao delete
   */
  export type NotificacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter which Notificacao to delete.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao deleteMany
   */
  export type NotificacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacaos to delete
     */
    where?: NotificacaoWhereInput
    /**
     * Limit how many Notificacaos to delete.
     */
    limit?: number
  }

  /**
   * Notificacao without action
   */
  export type NotificacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    nivel: 'nivel'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const DenunciaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    localizacao: 'localizacao',
    status: 'status',
    usuarioId: 'usuarioId'
  };

  export type DenunciaScalarFieldEnum = (typeof DenunciaScalarFieldEnum)[keyof typeof DenunciaScalarFieldEnum]


  export const OcorrenciaScalarFieldEnum: {
    id: 'id',
    denunciaId: 'denunciaId',
    servidorId: 'servidorId',
    status: 'status',
    data_registro: 'data_registro'
  };

  export type OcorrenciaScalarFieldEnum = (typeof OcorrenciaScalarFieldEnum)[keyof typeof OcorrenciaScalarFieldEnum]


  export const NotificacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    mensagem: 'mensagem',
    data_envio: 'data_envio'
  };

  export type NotificacaoScalarFieldEnum = (typeof NotificacaoScalarFieldEnum)[keyof typeof NotificacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    nivel?: StringFilter<"Usuario"> | string
    denuncias?: DenunciaListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nivel?: SortOrder
    denuncias?: DenunciaOrderByRelationAggregateInput
    ocorrencias?: OcorrenciaOrderByRelationAggregateInput
    notificacoes?: NotificacaoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    nivel?: StringFilter<"Usuario"> | string
    denuncias?: DenunciaListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nivel?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    nivel?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type DenunciaWhereInput = {
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    id?: StringFilter<"Denuncia"> | string
    descricao?: StringFilter<"Denuncia"> | string
    localizacao?: StringFilter<"Denuncia"> | string
    status?: StringFilter<"Denuncia"> | string
    usuarioId?: StringNullableFilter<"Denuncia"> | string | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
    ocorrencias?: OcorrenciaListRelationFilter
  }

  export type DenunciaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    localizacao?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    ocorrencias?: OcorrenciaOrderByRelationAggregateInput
  }

  export type DenunciaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    descricao?: StringFilter<"Denuncia"> | string
    localizacao?: StringFilter<"Denuncia"> | string
    status?: StringFilter<"Denuncia"> | string
    usuarioId?: StringNullableFilter<"Denuncia"> | string | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
    ocorrencias?: OcorrenciaListRelationFilter
  }, "id">

  export type DenunciaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    localizacao?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    _count?: DenunciaCountOrderByAggregateInput
    _max?: DenunciaMaxOrderByAggregateInput
    _min?: DenunciaMinOrderByAggregateInput
  }

  export type DenunciaScalarWhereWithAggregatesInput = {
    AND?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    OR?: DenunciaScalarWhereWithAggregatesInput[]
    NOT?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Denuncia"> | string
    descricao?: StringWithAggregatesFilter<"Denuncia"> | string
    localizacao?: StringWithAggregatesFilter<"Denuncia"> | string
    status?: StringWithAggregatesFilter<"Denuncia"> | string
    usuarioId?: StringNullableWithAggregatesFilter<"Denuncia"> | string | null
  }

  export type OcorrenciaWhereInput = {
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    id?: StringFilter<"Ocorrencia"> | string
    denunciaId?: StringFilter<"Ocorrencia"> | string
    servidorId?: StringFilter<"Ocorrencia"> | string
    status?: StringFilter<"Ocorrencia"> | string
    data_registro?: DateTimeFilter<"Ocorrencia"> | Date | string
    denuncia?: XOR<DenunciaScalarRelationFilter, DenunciaWhereInput>
    servidor?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type OcorrenciaOrderByWithRelationInput = {
    id?: SortOrder
    denunciaId?: SortOrder
    servidorId?: SortOrder
    status?: SortOrder
    data_registro?: SortOrder
    denuncia?: DenunciaOrderByWithRelationInput
    servidor?: UsuarioOrderByWithRelationInput
  }

  export type OcorrenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    denunciaId?: string
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    servidorId?: StringFilter<"Ocorrencia"> | string
    status?: StringFilter<"Ocorrencia"> | string
    data_registro?: DateTimeFilter<"Ocorrencia"> | Date | string
    denuncia?: XOR<DenunciaScalarRelationFilter, DenunciaWhereInput>
    servidor?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id" | "denunciaId">

  export type OcorrenciaOrderByWithAggregationInput = {
    id?: SortOrder
    denunciaId?: SortOrder
    servidorId?: SortOrder
    status?: SortOrder
    data_registro?: SortOrder
    _count?: OcorrenciaCountOrderByAggregateInput
    _max?: OcorrenciaMaxOrderByAggregateInput
    _min?: OcorrenciaMinOrderByAggregateInput
  }

  export type OcorrenciaScalarWhereWithAggregatesInput = {
    AND?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    OR?: OcorrenciaScalarWhereWithAggregatesInput[]
    NOT?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ocorrencia"> | string
    denunciaId?: StringWithAggregatesFilter<"Ocorrencia"> | string
    servidorId?: StringWithAggregatesFilter<"Ocorrencia"> | string
    status?: StringWithAggregatesFilter<"Ocorrencia"> | string
    data_registro?: DateTimeWithAggregatesFilter<"Ocorrencia"> | Date | string
  }

  export type NotificacaoWhereInput = {
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    id?: StringFilter<"Notificacao"> | string
    usuarioId?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    data_envio?: DateTimeFilter<"Notificacao"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type NotificacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type NotificacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    usuarioId?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    data_envio?: DateTimeFilter<"Notificacao"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type NotificacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
    _count?: NotificacaoCountOrderByAggregateInput
    _max?: NotificacaoMaxOrderByAggregateInput
    _min?: NotificacaoMinOrderByAggregateInput
  }

  export type NotificacaoScalarWhereWithAggregatesInput = {
    AND?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    OR?: NotificacaoScalarWhereWithAggregatesInput[]
    NOT?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notificacao"> | string
    usuarioId?: StringWithAggregatesFilter<"Notificacao"> | string
    mensagem?: StringWithAggregatesFilter<"Notificacao"> | string
    data_envio?: DateTimeWithAggregatesFilter<"Notificacao"> | Date | string
  }

  export type UsuarioCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaCreateNestedManyWithoutUsuarioInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutServidorInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaUncheckedCreateNestedManyWithoutUsuarioInput
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutServidorInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUpdateManyWithoutUsuarioNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutServidorNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUncheckedUpdateManyWithoutUsuarioNestedInput
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutServidorNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaCreateInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    usuario?: UsuarioCreateNestedOneWithoutDenunciasInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaUncheckedCreateInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    usuarioId?: string | null
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutDenunciasNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaCreateManyInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    usuarioId?: string | null
  }

  export type DenunciaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OcorrenciaCreateInput = {
    id?: string
    status?: string
    data_registro?: Date | string
    denuncia: DenunciaCreateNestedOneWithoutOcorrenciasInput
    servidor: UsuarioCreateNestedOneWithoutOcorrenciasInput
  }

  export type OcorrenciaUncheckedCreateInput = {
    id?: string
    denunciaId: string
    servidorId: string
    status?: string
    data_registro?: Date | string
  }

  export type OcorrenciaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
    denuncia?: DenunciaUpdateOneRequiredWithoutOcorrenciasNestedInput
    servidor?: UsuarioUpdateOneRequiredWithoutOcorrenciasNestedInput
  }

  export type OcorrenciaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    denunciaId?: StringFieldUpdateOperationsInput | string
    servidorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OcorrenciaCreateManyInput = {
    id?: string
    denunciaId: string
    servidorId: string
    status?: string
    data_registro?: Date | string
  }

  export type OcorrenciaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OcorrenciaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    denunciaId?: StringFieldUpdateOperationsInput | string
    servidorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoCreateInput = {
    id?: string
    mensagem: string
    data_envio?: Date | string
    usuario: UsuarioCreateNestedOneWithoutNotificacoesInput
  }

  export type NotificacaoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    mensagem: string
    data_envio?: Date | string
  }

  export type NotificacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutNotificacoesNestedInput
  }

  export type NotificacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoCreateManyInput = {
    id?: string
    usuarioId: string
    mensagem: string
    data_envio?: Date | string
  }

  export type NotificacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DenunciaListRelationFilter = {
    every?: DenunciaWhereInput
    some?: DenunciaWhereInput
    none?: DenunciaWhereInput
  }

  export type OcorrenciaListRelationFilter = {
    every?: OcorrenciaWhereInput
    some?: OcorrenciaWhereInput
    none?: OcorrenciaWhereInput
  }

  export type NotificacaoListRelationFilter = {
    every?: NotificacaoWhereInput
    some?: NotificacaoWhereInput
    none?: NotificacaoWhereInput
  }

  export type DenunciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OcorrenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nivel?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nivel?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nivel?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioNullableScalarRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DenunciaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    localizacao?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
  }

  export type DenunciaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    localizacao?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
  }

  export type DenunciaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    localizacao?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DenunciaScalarRelationFilter = {
    is?: DenunciaWhereInput
    isNot?: DenunciaWhereInput
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type OcorrenciaCountOrderByAggregateInput = {
    id?: SortOrder
    denunciaId?: SortOrder
    servidorId?: SortOrder
    status?: SortOrder
    data_registro?: SortOrder
  }

  export type OcorrenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    denunciaId?: SortOrder
    servidorId?: SortOrder
    status?: SortOrder
    data_registro?: SortOrder
  }

  export type OcorrenciaMinOrderByAggregateInput = {
    id?: SortOrder
    denunciaId?: SortOrder
    servidorId?: SortOrder
    status?: SortOrder
    data_registro?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NotificacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
  }

  export type NotificacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
  }

  export type NotificacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
  }

  export type DenunciaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput> | DenunciaCreateWithoutUsuarioInput[] | DenunciaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUsuarioInput | DenunciaCreateOrConnectWithoutUsuarioInput[]
    createMany?: DenunciaCreateManyUsuarioInputEnvelope
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
  }

  export type OcorrenciaCreateNestedManyWithoutServidorInput = {
    create?: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput> | OcorrenciaCreateWithoutServidorInput[] | OcorrenciaUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutServidorInput | OcorrenciaCreateOrConnectWithoutServidorInput[]
    createMany?: OcorrenciaCreateManyServidorInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type NotificacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type DenunciaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput> | DenunciaCreateWithoutUsuarioInput[] | DenunciaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUsuarioInput | DenunciaCreateOrConnectWithoutUsuarioInput[]
    createMany?: DenunciaCreateManyUsuarioInputEnvelope
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
  }

  export type OcorrenciaUncheckedCreateNestedManyWithoutServidorInput = {
    create?: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput> | OcorrenciaCreateWithoutServidorInput[] | OcorrenciaUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutServidorInput | OcorrenciaCreateOrConnectWithoutServidorInput[]
    createMany?: OcorrenciaCreateManyServidorInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DenunciaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput> | DenunciaCreateWithoutUsuarioInput[] | DenunciaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUsuarioInput | DenunciaCreateOrConnectWithoutUsuarioInput[]
    upsert?: DenunciaUpsertWithWhereUniqueWithoutUsuarioInput | DenunciaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: DenunciaCreateManyUsuarioInputEnvelope
    set?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    disconnect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    delete?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    update?: DenunciaUpdateWithWhereUniqueWithoutUsuarioInput | DenunciaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: DenunciaUpdateManyWithWhereWithoutUsuarioInput | DenunciaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
  }

  export type OcorrenciaUpdateManyWithoutServidorNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput> | OcorrenciaCreateWithoutServidorInput[] | OcorrenciaUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutServidorInput | OcorrenciaCreateOrConnectWithoutServidorInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutServidorInput | OcorrenciaUpsertWithWhereUniqueWithoutServidorInput[]
    createMany?: OcorrenciaCreateManyServidorInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutServidorInput | OcorrenciaUpdateWithWhereUniqueWithoutServidorInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutServidorInput | OcorrenciaUpdateManyWithWhereWithoutServidorInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type NotificacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput | NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput | NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutUsuarioInput | NotificacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type DenunciaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput> | DenunciaCreateWithoutUsuarioInput[] | DenunciaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DenunciaCreateOrConnectWithoutUsuarioInput | DenunciaCreateOrConnectWithoutUsuarioInput[]
    upsert?: DenunciaUpsertWithWhereUniqueWithoutUsuarioInput | DenunciaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: DenunciaCreateManyUsuarioInputEnvelope
    set?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    disconnect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    delete?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    connect?: DenunciaWhereUniqueInput | DenunciaWhereUniqueInput[]
    update?: DenunciaUpdateWithWhereUniqueWithoutUsuarioInput | DenunciaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: DenunciaUpdateManyWithWhereWithoutUsuarioInput | DenunciaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
  }

  export type OcorrenciaUncheckedUpdateManyWithoutServidorNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput> | OcorrenciaCreateWithoutServidorInput[] | OcorrenciaUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutServidorInput | OcorrenciaCreateOrConnectWithoutServidorInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutServidorInput | OcorrenciaUpsertWithWhereUniqueWithoutServidorInput[]
    createMany?: OcorrenciaCreateManyServidorInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutServidorInput | OcorrenciaUpdateWithWhereUniqueWithoutServidorInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutServidorInput | OcorrenciaUpdateManyWithWhereWithoutServidorInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput | NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput | NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutUsuarioInput | NotificacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutDenunciasInput = {
    create?: XOR<UsuarioCreateWithoutDenunciasInput, UsuarioUncheckedCreateWithoutDenunciasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDenunciasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type OcorrenciaCreateNestedManyWithoutDenunciaInput = {
    create?: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput> | OcorrenciaCreateWithoutDenunciaInput[] | OcorrenciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutDenunciaInput | OcorrenciaCreateOrConnectWithoutDenunciaInput[]
    createMany?: OcorrenciaCreateManyDenunciaInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type OcorrenciaUncheckedCreateNestedManyWithoutDenunciaInput = {
    create?: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput> | OcorrenciaCreateWithoutDenunciaInput[] | OcorrenciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutDenunciaInput | OcorrenciaCreateOrConnectWithoutDenunciaInput[]
    createMany?: OcorrenciaCreateManyDenunciaInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type UsuarioUpdateOneWithoutDenunciasNestedInput = {
    create?: XOR<UsuarioCreateWithoutDenunciasInput, UsuarioUncheckedCreateWithoutDenunciasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDenunciasInput
    upsert?: UsuarioUpsertWithoutDenunciasInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutDenunciasInput, UsuarioUpdateWithoutDenunciasInput>, UsuarioUncheckedUpdateWithoutDenunciasInput>
  }

  export type OcorrenciaUpdateManyWithoutDenunciaNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput> | OcorrenciaCreateWithoutDenunciaInput[] | OcorrenciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutDenunciaInput | OcorrenciaCreateOrConnectWithoutDenunciaInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutDenunciaInput | OcorrenciaUpsertWithWhereUniqueWithoutDenunciaInput[]
    createMany?: OcorrenciaCreateManyDenunciaInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutDenunciaInput | OcorrenciaUpdateWithWhereUniqueWithoutDenunciaInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutDenunciaInput | OcorrenciaUpdateManyWithWhereWithoutDenunciaInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OcorrenciaUncheckedUpdateManyWithoutDenunciaNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput> | OcorrenciaCreateWithoutDenunciaInput[] | OcorrenciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutDenunciaInput | OcorrenciaCreateOrConnectWithoutDenunciaInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutDenunciaInput | OcorrenciaUpsertWithWhereUniqueWithoutDenunciaInput[]
    createMany?: OcorrenciaCreateManyDenunciaInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutDenunciaInput | OcorrenciaUpdateWithWhereUniqueWithoutDenunciaInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutDenunciaInput | OcorrenciaUpdateManyWithWhereWithoutDenunciaInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type DenunciaCreateNestedOneWithoutOcorrenciasInput = {
    create?: XOR<DenunciaCreateWithoutOcorrenciasInput, DenunciaUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: DenunciaCreateOrConnectWithoutOcorrenciasInput
    connect?: DenunciaWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutOcorrenciasInput = {
    create?: XOR<UsuarioCreateWithoutOcorrenciasInput, UsuarioUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutOcorrenciasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DenunciaUpdateOneRequiredWithoutOcorrenciasNestedInput = {
    create?: XOR<DenunciaCreateWithoutOcorrenciasInput, DenunciaUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: DenunciaCreateOrConnectWithoutOcorrenciasInput
    upsert?: DenunciaUpsertWithoutOcorrenciasInput
    connect?: DenunciaWhereUniqueInput
    update?: XOR<XOR<DenunciaUpdateToOneWithWhereWithoutOcorrenciasInput, DenunciaUpdateWithoutOcorrenciasInput>, DenunciaUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type UsuarioUpdateOneRequiredWithoutOcorrenciasNestedInput = {
    create?: XOR<UsuarioCreateWithoutOcorrenciasInput, UsuarioUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutOcorrenciasInput
    upsert?: UsuarioUpsertWithoutOcorrenciasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutOcorrenciasInput, UsuarioUpdateWithoutOcorrenciasInput>, UsuarioUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type UsuarioCreateNestedOneWithoutNotificacoesInput = {
    create?: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotificacoesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutNotificacoesNestedInput = {
    create?: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotificacoesInput
    upsert?: UsuarioUpsertWithoutNotificacoesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutNotificacoesInput, UsuarioUpdateWithoutNotificacoesInput>, UsuarioUncheckedUpdateWithoutNotificacoesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DenunciaCreateWithoutUsuarioInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    ocorrencias?: OcorrenciaCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaCreateOrConnectWithoutUsuarioInput = {
    where: DenunciaWhereUniqueInput
    create: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput>
  }

  export type DenunciaCreateManyUsuarioInputEnvelope = {
    data: DenunciaCreateManyUsuarioInput | DenunciaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type OcorrenciaCreateWithoutServidorInput = {
    id?: string
    status?: string
    data_registro?: Date | string
    denuncia: DenunciaCreateNestedOneWithoutOcorrenciasInput
  }

  export type OcorrenciaUncheckedCreateWithoutServidorInput = {
    id?: string
    denunciaId: string
    status?: string
    data_registro?: Date | string
  }

  export type OcorrenciaCreateOrConnectWithoutServidorInput = {
    where: OcorrenciaWhereUniqueInput
    create: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput>
  }

  export type OcorrenciaCreateManyServidorInputEnvelope = {
    data: OcorrenciaCreateManyServidorInput | OcorrenciaCreateManyServidorInput[]
    skipDuplicates?: boolean
  }

  export type NotificacaoCreateWithoutUsuarioInput = {
    id?: string
    mensagem: string
    data_envio?: Date | string
  }

  export type NotificacaoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    mensagem: string
    data_envio?: Date | string
  }

  export type NotificacaoCreateOrConnectWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type NotificacaoCreateManyUsuarioInputEnvelope = {
    data: NotificacaoCreateManyUsuarioInput | NotificacaoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type DenunciaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: DenunciaWhereUniqueInput
    update: XOR<DenunciaUpdateWithoutUsuarioInput, DenunciaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<DenunciaCreateWithoutUsuarioInput, DenunciaUncheckedCreateWithoutUsuarioInput>
  }

  export type DenunciaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: DenunciaWhereUniqueInput
    data: XOR<DenunciaUpdateWithoutUsuarioInput, DenunciaUncheckedUpdateWithoutUsuarioInput>
  }

  export type DenunciaUpdateManyWithWhereWithoutUsuarioInput = {
    where: DenunciaScalarWhereInput
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type DenunciaScalarWhereInput = {
    AND?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
    OR?: DenunciaScalarWhereInput[]
    NOT?: DenunciaScalarWhereInput | DenunciaScalarWhereInput[]
    id?: StringFilter<"Denuncia"> | string
    descricao?: StringFilter<"Denuncia"> | string
    localizacao?: StringFilter<"Denuncia"> | string
    status?: StringFilter<"Denuncia"> | string
    usuarioId?: StringNullableFilter<"Denuncia"> | string | null
  }

  export type OcorrenciaUpsertWithWhereUniqueWithoutServidorInput = {
    where: OcorrenciaWhereUniqueInput
    update: XOR<OcorrenciaUpdateWithoutServidorInput, OcorrenciaUncheckedUpdateWithoutServidorInput>
    create: XOR<OcorrenciaCreateWithoutServidorInput, OcorrenciaUncheckedCreateWithoutServidorInput>
  }

  export type OcorrenciaUpdateWithWhereUniqueWithoutServidorInput = {
    where: OcorrenciaWhereUniqueInput
    data: XOR<OcorrenciaUpdateWithoutServidorInput, OcorrenciaUncheckedUpdateWithoutServidorInput>
  }

  export type OcorrenciaUpdateManyWithWhereWithoutServidorInput = {
    where: OcorrenciaScalarWhereInput
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyWithoutServidorInput>
  }

  export type OcorrenciaScalarWhereInput = {
    AND?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    OR?: OcorrenciaScalarWhereInput[]
    NOT?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    id?: StringFilter<"Ocorrencia"> | string
    denunciaId?: StringFilter<"Ocorrencia"> | string
    servidorId?: StringFilter<"Ocorrencia"> | string
    status?: StringFilter<"Ocorrencia"> | string
    data_registro?: DateTimeFilter<"Ocorrencia"> | Date | string
  }

  export type NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    update: XOR<NotificacaoUpdateWithoutUsuarioInput, NotificacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    data: XOR<NotificacaoUpdateWithoutUsuarioInput, NotificacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type NotificacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: NotificacaoScalarWhereInput
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type NotificacaoScalarWhereInput = {
    AND?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    OR?: NotificacaoScalarWhereInput[]
    NOT?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    id?: StringFilter<"Notificacao"> | string
    usuarioId?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    data_envio?: DateTimeFilter<"Notificacao"> | Date | string
  }

  export type UsuarioCreateWithoutDenunciasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    ocorrencias?: OcorrenciaCreateNestedManyWithoutServidorInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutDenunciasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutServidorInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutDenunciasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDenunciasInput, UsuarioUncheckedCreateWithoutDenunciasInput>
  }

  export type OcorrenciaCreateWithoutDenunciaInput = {
    id?: string
    status?: string
    data_registro?: Date | string
    servidor: UsuarioCreateNestedOneWithoutOcorrenciasInput
  }

  export type OcorrenciaUncheckedCreateWithoutDenunciaInput = {
    id?: string
    servidorId: string
    status?: string
    data_registro?: Date | string
  }

  export type OcorrenciaCreateOrConnectWithoutDenunciaInput = {
    where: OcorrenciaWhereUniqueInput
    create: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput>
  }

  export type OcorrenciaCreateManyDenunciaInputEnvelope = {
    data: OcorrenciaCreateManyDenunciaInput | OcorrenciaCreateManyDenunciaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutDenunciasInput = {
    update: XOR<UsuarioUpdateWithoutDenunciasInput, UsuarioUncheckedUpdateWithoutDenunciasInput>
    create: XOR<UsuarioCreateWithoutDenunciasInput, UsuarioUncheckedCreateWithoutDenunciasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutDenunciasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutDenunciasInput, UsuarioUncheckedUpdateWithoutDenunciasInput>
  }

  export type UsuarioUpdateWithoutDenunciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUpdateManyWithoutServidorNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDenunciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutServidorNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type OcorrenciaUpsertWithWhereUniqueWithoutDenunciaInput = {
    where: OcorrenciaWhereUniqueInput
    update: XOR<OcorrenciaUpdateWithoutDenunciaInput, OcorrenciaUncheckedUpdateWithoutDenunciaInput>
    create: XOR<OcorrenciaCreateWithoutDenunciaInput, OcorrenciaUncheckedCreateWithoutDenunciaInput>
  }

  export type OcorrenciaUpdateWithWhereUniqueWithoutDenunciaInput = {
    where: OcorrenciaWhereUniqueInput
    data: XOR<OcorrenciaUpdateWithoutDenunciaInput, OcorrenciaUncheckedUpdateWithoutDenunciaInput>
  }

  export type OcorrenciaUpdateManyWithWhereWithoutDenunciaInput = {
    where: OcorrenciaScalarWhereInput
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyWithoutDenunciaInput>
  }

  export type DenunciaCreateWithoutOcorrenciasInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    usuario?: UsuarioCreateNestedOneWithoutDenunciasInput
  }

  export type DenunciaUncheckedCreateWithoutOcorrenciasInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
    usuarioId?: string | null
  }

  export type DenunciaCreateOrConnectWithoutOcorrenciasInput = {
    where: DenunciaWhereUniqueInput
    create: XOR<DenunciaCreateWithoutOcorrenciasInput, DenunciaUncheckedCreateWithoutOcorrenciasInput>
  }

  export type UsuarioCreateWithoutOcorrenciasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutOcorrenciasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutOcorrenciasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutOcorrenciasInput, UsuarioUncheckedCreateWithoutOcorrenciasInput>
  }

  export type DenunciaUpsertWithoutOcorrenciasInput = {
    update: XOR<DenunciaUpdateWithoutOcorrenciasInput, DenunciaUncheckedUpdateWithoutOcorrenciasInput>
    create: XOR<DenunciaCreateWithoutOcorrenciasInput, DenunciaUncheckedCreateWithoutOcorrenciasInput>
    where?: DenunciaWhereInput
  }

  export type DenunciaUpdateToOneWithWhereWithoutOcorrenciasInput = {
    where?: DenunciaWhereInput
    data: XOR<DenunciaUpdateWithoutOcorrenciasInput, DenunciaUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type DenunciaUpdateWithoutOcorrenciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutDenunciasNestedInput
  }

  export type DenunciaUncheckedUpdateWithoutOcorrenciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    usuarioId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUpsertWithoutOcorrenciasInput = {
    update: XOR<UsuarioUpdateWithoutOcorrenciasInput, UsuarioUncheckedUpdateWithoutOcorrenciasInput>
    create: XOR<UsuarioCreateWithoutOcorrenciasInput, UsuarioUncheckedCreateWithoutOcorrenciasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutOcorrenciasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutOcorrenciasInput, UsuarioUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type UsuarioUpdateWithoutOcorrenciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutOcorrenciasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutNotificacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaCreateNestedManyWithoutUsuarioInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutServidorInput
  }

  export type UsuarioUncheckedCreateWithoutNotificacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    nivel: string
    denuncias?: DenunciaUncheckedCreateNestedManyWithoutUsuarioInput
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutServidorInput
  }

  export type UsuarioCreateOrConnectWithoutNotificacoesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
  }

  export type UsuarioUpsertWithoutNotificacoesInput = {
    update: XOR<UsuarioUpdateWithoutNotificacoesInput, UsuarioUncheckedUpdateWithoutNotificacoesInput>
    create: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutNotificacoesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutNotificacoesInput, UsuarioUncheckedUpdateWithoutNotificacoesInput>
  }

  export type UsuarioUpdateWithoutNotificacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUpdateManyWithoutUsuarioNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutServidorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutNotificacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    denuncias?: DenunciaUncheckedUpdateManyWithoutUsuarioNestedInput
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutServidorNestedInput
  }

  export type DenunciaCreateManyUsuarioInput = {
    id?: string
    descricao: string
    localizacao: string
    status?: string
  }

  export type OcorrenciaCreateManyServidorInput = {
    id?: string
    denunciaId: string
    status?: string
    data_registro?: Date | string
  }

  export type NotificacaoCreateManyUsuarioInput = {
    id?: string
    mensagem: string
    data_envio?: Date | string
  }

  export type DenunciaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaUpdateWithoutServidorInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
    denuncia?: DenunciaUpdateOneRequiredWithoutOcorrenciasNestedInput
  }

  export type OcorrenciaUncheckedUpdateWithoutServidorInput = {
    id?: StringFieldUpdateOperationsInput | string
    denunciaId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OcorrenciaUncheckedUpdateManyWithoutServidorInput = {
    id?: StringFieldUpdateOperationsInput | string
    denunciaId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OcorrenciaCreateManyDenunciaInput = {
    id?: string
    servidorId: string
    status?: string
    data_registro?: Date | string
  }

  export type OcorrenciaUpdateWithoutDenunciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
    servidor?: UsuarioUpdateOneRequiredWithoutOcorrenciasNestedInput
  }

  export type OcorrenciaUncheckedUpdateWithoutDenunciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    servidorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OcorrenciaUncheckedUpdateManyWithoutDenunciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    servidorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    data_registro?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}